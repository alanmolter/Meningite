import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from typing import Dict, Any


def show_faixa_etaria_analysis(dados: Dict[str, Any]) -> None:
    """Mostra an√°lise detalhada de faixa et√°ria e cobertura vacinal por regi√£o"""
    
    st.header("üë∂ **An√°lise de Faixa Et√°ria e Cobertura Vacinal por Regi√£o**")
    st.markdown("---")
    
    st.markdown("""
    ## üéØ **Vis√£o Geral da An√°lise**
    
    Esta se√ß√£o apresenta uma **an√°lise epidemiol√≥gica abrangente** da meningite no Brasil, 
    com foco na **distribui√ß√£o por faixa et√°ria** e **cobertura vacinal regional**. 
    
    ### üìÖ **Per√≠odo Analisado:**
    
    - **Casos de meningite**: Dados consolidados de **2017-2024** (8 anos de vigil√¢ncia)
    - **Cobertura vacinal**: Dados de **2007-2022** (15 anos de campanhas)
    - **Popula√ß√£o**: Dados oficiais do **IBGE 2024** (proje√ß√µes atualizadas)
    - **An√°lise temporal**: Tend√™ncias e padr√µes ao longo do per√≠odo
    
    ### üìä **O que voc√™ encontrar√° aqui:**
    
    - **Distribui√ß√£o et√°ria** dos casos de meningite (2017-2024)
    - **An√°lise regional** com dados de todas as regi√µes brasileiras
    - **Taxas de incid√™ncia** calculadas com dados oficiais do IBGE 2024
    - **Cobertura vacinal** e sua correla√ß√£o com incid√™ncia (2007-2022)
    - **An√°lise etiol√≥gica** e de sorogrupos por regi√£o
    - **Interpreta√ß√µes did√°ticas** de cada an√°lise estat√≠stica
    
    ### üî¨ **Metodologia Cient√≠fica:**
    
    - **Dados oficiais**: IBGE 2024, sistemas de vigil√¢ncia epidemiol√≥gica (SINAN)
    - **An√°lises estat√≠sticas**: Taxas de incid√™ncia, correla√ß√µes, distribui√ß√µes
    - **Interpreta√ß√£o epidemiol√≥gica**: Baseada em evid√™ncias cient√≠ficas
    - **Compara√ß√£o com literatura**: Valida√ß√£o de achados cient√≠ficos
    
    ### üìö **Como usar esta an√°lise:**
    
    Cada se√ß√£o cont√©m **explica√ß√µes detalhadas** sobre:
    - **Conceitos epidemiol√≥gicos** utilizados
    - **Metodologia** de cada an√°lise
    - **Interpreta√ß√£o** dos resultados
    - **Implica√ß√µes** para pol√≠ticas p√∫blicas
    
    ---
    """)
    
    # Carregar dados limpos
    try:
        # Dados de faixa et√°ria
        faixa_etaria = pd.read_csv('TABELAS/imunizacao_por_faixa_etaria.csv')
        
        # Dados de casos por UF e faixa et√°ria
        casos_faixa_etaria = pd.read_csv('TABELAS/casos_por_uf_faixa_etaria_clean.csv')
        
        # Dados de cobertura vacinal por regi√£o
        cobertura_regiao = pd.read_csv('TABELAS/doses_faixa_etaria_regioes_clean.csv')
        
        # Dados de cobertura por capitais
        cobertura_capitais = pd.read_csv('TABELAS/doses_faixaetaria_capitais_clean.csv')
        
        # Dados de casos por UF e etiologia
        casos_etologia = pd.read_csv('TABELAS/casos_por_uf_etologia_clean.csv')
        
        # Dados de casos por UF e sorogrupo
        casos_sorogrupo = pd.read_csv('TABELAS/casos_por_uf_sorogrupo_clean.csv')
        
        # NOVOS DADOS: Popula√ß√£o por regi√£o (IBGE 2024)
        populacao_ibge = pd.read_csv('TABELAS/populacao_ibge_2024_clean.csv')
        
        # NOVOS DADOS: Popula√ß√£o por faixa et√°ria
        populacao_faixa_etaria = pd.read_csv('TABELAS/populacao_por_faixa_etaria_clean.csv')
        
        st.success("‚úÖ Dados carregados com sucesso! Incluindo novos dados de popula√ß√£o do IBGE 2024")
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados: {e}")
        return
    
    # 1. AN√ÅLISE DE DISTRIBUI√á√ÉO POR FAIXA ET√ÅRIA
    st.subheader("üìä **1. Distribui√ß√£o de Casos por Faixa Et√°ria**")
    
    st.markdown("""
    ### üìö **Conceito e Import√¢ncia**
    
    A **distribui√ß√£o et√°ria** dos casos de meningite √© um indicador epidemiol√≥gico fundamental que revela:
    
    - **Grupos de risco**: Faixas et√°rias com maior susceptibilidade √† doen√ßa
    - **Padr√µes epidemiol√≥gicos**: Como a doen√ßa se comporta em diferentes idades
    - **Estrat√©gias de preven√ß√£o**: Onde focar campanhas de vacina√ß√£o e vigil√¢ncia
    - **Compara√ß√£o com literatura**: Valida√ß√£o de achados cient√≠ficos
    
    ### üîç **Metodologia**
    
    Esta an√°lise utiliza dados consolidados de casos confirmados de meningite do per√≠odo **2017-2024**, 
    agrupados por faixas et√°rias padronizadas. Os dados s√£o apresentados em n√∫meros absolutos e 
    percentuais para facilitar a interpreta√ß√£o.
    
    **Per√≠odo dos dados**: 8 anos de vigil√¢ncia epidemiol√≥gica (2017-2024)
    """)
    
    # Preparar dados de faixa et√°ria
    faixa_etaria_clean = faixa_etaria.copy()
    faixa_etaria_clean['Faixa_Etaria'] = faixa_etaria_clean['Faixa_Etaria'].str.replace('Em branco/IGN', 'Ignorado')
    
    # Gr√°fico de distribui√ß√£o por faixa et√°ria
    col1, col2 = st.columns(2)
    
    with col1:
        fig_faixa = px.pie(
            faixa_etaria_clean,
            values='Casos',
            names='Faixa_Etaria',
            title="Distribui√ß√£o de Casos por Faixa Et√°ria",
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        fig_faixa.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_faixa, use_container_width=True)
    
    with col2:
        fig_faixa_bar = px.bar(
            faixa_etaria_clean,
            x='Faixa_Etaria',
            y='Casos',
            title="N√∫mero de Casos por Faixa Et√°ria",
            color='Casos',
            color_continuous_scale='Blues'
        )
        fig_faixa_bar.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig_faixa_bar, use_container_width=True)
    
    # Estat√≠sticas descritivas
    st.subheader("üìà **Estat√≠sticas Descritivas por Faixa Et√°ria**")
    
    st.markdown("""
    ### üìä **Interpreta√ß√£o dos Resultados**
    
    As estat√≠sticas descritivas fornecem uma vis√£o quantitativa da distribui√ß√£o et√°ria:
    
    - **Total de Casos**: N√∫mero absoluto de casos confirmados no per√≠odo analisado
    - **Faixa de Maior Incid√™ncia**: Identifica o grupo et√°rio com maior n√∫mero de casos
    - **Percentual em Crian√ßas**: Propor√ß√£o de casos em menores de 10 anos, grupo de maior risco
    """)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        total_casos = faixa_etaria_clean['Casos'].sum()
        st.metric("Total de Casos", f"{total_casos:,}")
    
    with col2:
        faixa_maior_incidencia = faixa_etaria_clean.loc[faixa_etaria_clean['Casos'].idxmax(), 'Faixa_Etaria']
        casos_maior_incidencia = faixa_etaria_clean['Casos'].max()
        st.metric("Faixa com Maior Incid√™ncia", f"{faixa_maior_incidencia}", f"{casos_maior_incidencia:,} casos")
    
    with col3:
        percentual_criancas = (faixa_etaria_clean[faixa_etaria_clean['Faixa_Etaria'].isin(['<1 Ano', '1-4', '5-9'])]['Casos'].sum() / total_casos) * 100
        st.metric("Casos em Crian√ßas (<10 anos)", f"{percentual_criancas:.1f}%")
    
    st.markdown("""
    ### üéØ **Principais Achados**
    
    - **Padr√£o Bimodal**: A meningite apresenta dois picos de incid√™ncia - em crian√ßas e adultos jovens
    - **Vulnerabilidade Pedi√°trica**: Crian√ßas menores de 10 anos representam a maior propor√ß√£o de casos
    - **Implica√ß√µes Cl√≠nicas**: Maior gravidade e letalidade em faixas et√°rias espec√≠ficas
    - **Estrat√©gias de Preven√ß√£o**: Foco em vacina√ß√£o pedi√°trica e vigil√¢ncia em grupos de risco
    """)
    
    # 2. AN√ÅLISE REGIONAL
    st.subheader("üó∫Ô∏è **2. An√°lise Regional de Casos por Faixa Et√°ria**")
    
    st.markdown("""
    ### üåç **Conceito e Relev√¢ncia**
    
    A **an√°lise regional** permite identificar:
    
    - **Desigualdades geogr√°ficas**: Varia√ß√µes na distribui√ß√£o de casos entre regi√µes
    - **Fatores socioecon√¥micos**: Influ√™ncia de condi√ß√µes de vida e acesso √† sa√∫de
    - **Estrat√©gias regionais**: Necessidade de abordagens espec√≠ficas por regi√£o
    - **Recursos de sa√∫de**: Distribui√ß√£o de servi√ßos e cobertura vacinal
    
    ### üìä **Metodologia**
    
    Os dados s√£o agrupados por Unidades da Federa√ß√£o (UF) e consolidados por regi√£o brasileira:
    - **Norte**: 7 estados
    - **Nordeste**: 9 estados  
    - **Sudeste**: 4 estados
    - **Sul**: 3 estados
    - **Centro-Oeste**: 4 estados (incluindo DF)
    """)
    
    # Preparar dados regionais
    casos_faixa_etaria_clean = casos_faixa_etaria.copy()
    
    # Mapear UFs para regi√µes
    mapeamento_regioes = {
        '11_Rondonia': 'Norte', '12_Acre': 'Norte', '13_Amazonas': 'Norte', '14_Roraima': 'Norte',
        '15_Para': 'Norte', '16_Amapa': 'Norte', '17_Tocantins': 'Norte',
        '21_Maranhao': 'Nordeste', '22_Piaui': 'Nordeste', '23_Ceara': 'Nordeste',
        '24_Rio_Grande_do_Norte': 'Nordeste', '25_Paraiba': 'Nordeste', '26_Pernambuco': 'Nordeste',
        '27_Alagoas': 'Nordeste', '28_Sergipe': 'Nordeste', '29_Bahia': 'Nordeste',
        '31_Minas_Gerais': 'Sudeste', '32_Espirito_Santo': 'Sudeste', '33_Rio_de_Janeiro': 'Sudeste',
        '35_Sao_Paulo': 'Sudeste',
        '41_Parana': 'Sul', '42_Santa_Catarina': 'Sul', '43_Rio_Grande_do_Sul': 'Sul',
        '50_Mato_Grosso_do_Sul': 'Centro-Oeste', '51_Mato_Grosso': 'Centro-Oeste',
        '52_Goias': 'Centro-Oeste', '53_Distrito_Federal': 'Centro-Oeste'
    }
    
    casos_faixa_etaria_clean['Regiao'] = casos_faixa_etaria_clean['UF_notificacao'].map(mapeamento_regioes)
    
    # Agrupar por regi√£o
    casos_por_regiao = casos_faixa_etaria_clean.groupby('Regiao').agg({
        'Menor_1_Ano': 'sum',
        '1_a_4_anos': 'sum',
        '5_a_9_anos': 'sum',
        '10_a_14_anos': 'sum',
        '15_a_19_anos': 'sum',
        '20_a_39_anos': 'sum',
        '40_a_59_anos': 'sum',
        '60_a_64_anos': 'sum',
        '65_a_69_anos': 'sum',
        '70_a_79_anos': 'sum',
        '80_e_mais': 'sum',
        'Total': 'sum'
    }).reset_index()
    
    # Gr√°fico de casos por regi√£o
    fig_regiao = px.bar(
        casos_por_regiao,
        x='Regiao',
        y='Total',
        title="Total de Casos por Regi√£o",
        color='Total',
        color_continuous_scale='Reds'
    )
    st.plotly_chart(fig_regiao, use_container_width=True)
    
    # Gr√°fico de distribui√ß√£o et√°ria por regi√£o
    faixas_etarias = ['Menor_1_Ano', '1_a_4_anos', '5_a_9_anos', '10_a_14_anos', 
                     '15_a_19_anos', '20_a_39_anos', '40_a_59_anos', '60_a_64_anos',
                     '65_a_69_anos', '70_a_79_anos', '80_e_mais']
    
    fig_distribuicao = go.Figure()
    
    for regiao in casos_por_regiao['Regiao']:
        dados_regiao = casos_por_regiao[casos_por_regiao['Regiao'] == regiao]
        valores = [dados_regiao[faixa].iloc[0] for faixa in faixas_etarias]
        
        fig_distribuicao.add_trace(go.Bar(
            name=regiao,
            x=faixas_etarias,
            y=valores
        ))
    
    fig_distribuicao.update_layout(
        title="Distribui√ß√£o de Casos por Faixa Et√°ria e Regi√£o",
        xaxis_title="Faixa Et√°ria",
        yaxis_title="N√∫mero de Casos",
        barmode='group',
        xaxis_tickangle=-45
    )
    st.plotly_chart(fig_distribuicao, use_container_width=True)
    
    st.markdown("""
    ### üîç **Interpreta√ß√£o dos Gr√°ficos Regionais**
    
    **Gr√°fico de Casos por Regi√£o:**
    - Mostra o **volume absoluto** de casos por regi√£o
    - Reflete a **densidade populacional** e **carga da doen√ßa**
    - Identifica regi√µes com maior **carga epidemiol√≥gica**
    
    **Gr√°fico de Distribui√ß√£o Et√°ria por Regi√£o:**
    - Revela **padr√µes et√°rios espec√≠ficos** de cada regi√£o
    - Permite comparar **perfis epidemiol√≥gicos** regionais
    - Identifica **varia√ß√µes** na distribui√ß√£o por faixa et√°ria
    
    ### üìà **Principais Observa√ß√µes**
    
    - **Sudeste**: Maior n√∫mero absoluto de casos (maior popula√ß√£o)
    - **Nordeste**: Segundo maior volume, com padr√µes et√°rios espec√≠ficos
    - **Norte**: Menor n√∫mero de casos, mas com caracter√≠sticas pr√≥prias
    - **Varia√ß√µes Et√°rias**: Cada regi√£o apresenta padr√µes distintos de distribui√ß√£o et√°ria
    """)
    
    # 3. AN√ÅLISE DE COBERTURA VACINAL
    st.subheader("üíâ **3. An√°lise de Cobertura Vacinal por Regi√£o**")
    
    st.markdown("""
    ### üíâ **Conceito e Import√¢ncia da Cobertura Vacinal**
    
    A **cobertura vacinal** √© um indicador fundamental que mede:
    
    - **Prote√ß√£o populacional**: Percentual da popula√ß√£o protegida contra a doen√ßa
    - **Efetividade das campanhas**: Sucesso das estrat√©gias de vacina√ß√£o
    - **Equidade em sa√∫de**: Acesso igualit√°rio √† preven√ß√£o
    - **Impacto epidemiol√≥gico**: Rela√ß√£o entre cobertura e redu√ß√£o de casos
    
    ### üìä **Metodologia**
    
    A an√°lise considera:
    - **Doses aplicadas** por faixa et√°ria e regi√£o (per√≠odo 2007-2022)
    - **Popula√ß√£o eleg√≠vel** para vacina√ß√£o
    - **Cobertura pedi√°trica** (grupo de maior risco)
    - **Compara√ß√£o regional** das estrat√©gias de vacina√ß√£o
    
    **Per√≠odo dos dados**: 15 anos de campanhas de vacina√ß√£o (2007-2022)
    """)
    
    # Preparar dados de cobertura
    cobertura_clean = cobertura_regiao.copy()
    
    # Calcular cobertura por faixa et√°ria pedi√°trica
    faixas_pediatricas = ['Menor_de_1_ano', '1_ano', '2_anos', '3_anos', '4_anos', 
                         '5_anos', '6_anos', '7_anos', '8_anos', '9_anos']
    
    cobertura_clean['Total_Pediatrico'] = cobertura_clean[faixas_pediatricas].sum(axis=1)
    cobertura_clean['Total_Geral'] = cobertura_clean['Total']
    
    # Gr√°fico de cobertura vacinal
    fig_cobertura = px.bar(
        cobertura_clean,
        x='Regiao',
        y='Total_Pediatrico',
        title="Cobertura Vacinal Pedi√°trica por Regi√£o",
        color='Total_Pediatrico',
        color_continuous_scale='Greens'
    )
    st.plotly_chart(fig_cobertura, use_container_width=True)
    
    st.markdown("""
    ### üîç **Interpreta√ß√£o da Cobertura Vacinal**
    
    **O que o gr√°fico mostra:**
    - **Volume de doses** aplicadas na popula√ß√£o pedi√°trica por regi√£o
    - **Compara√ß√£o regional** das estrat√©gias de vacina√ß√£o
    - **Identifica√ß√£o** de regi√µes com maior/menor cobertura
    
    **Como interpretar:**
    - **Valores altos**: Maior n√∫mero de doses aplicadas (n√£o necessariamente maior cobertura percentual)
    - **Varia√ß√µes regionais**: Refletem diferen√ßas populacionais e estrat√©gias de vacina√ß√£o
    - **Cobertura pedi√°trica**: Foco no grupo de maior risco (crian√ßas)
    
    ### üìà **Principais Observa√ß√µes**
    
    - **Sudeste**: Maior volume de doses (maior popula√ß√£o pedi√°trica)
    - **Nordeste**: Segundo maior volume, com estrat√©gias espec√≠ficas
    - **Varia√ß√µes**: Cada regi√£o apresenta padr√µes distintos de cobertura
    - **Necessidade**: An√°lise complementar com dados de popula√ß√£o para calcular percentuais
    """)
    
    # 4. AN√ÅLISE DE TAXAS DE INCID√äNCIA POR FAIXA ET√ÅRIA
    st.subheader("üìà **4. Taxas de Incid√™ncia por Faixa Et√°ria (por 100.000 habitantes)**")
    
    st.markdown("""
    ### üìä **Conceito de Taxa de Incid√™ncia**
    
    A **taxa de incid√™ncia** √© um indicador epidemiol√≥gico fundamental que expressa:
    
    - **Risco de adoecimento**: Probabilidade de desenvolver a doen√ßa em uma popula√ß√£o
    - **Padroniza√ß√£o**: Permite compara√ß√µes entre diferentes popula√ß√µes e regi√µes
    - **Magnitude do problema**: Quantifica a carga da doen√ßa na popula√ß√£o
    - **Tend√™ncias temporais**: Monitora mudan√ßas na incid√™ncia ao longo do tempo
    
    ### üßÆ **F√≥rmula de C√°lculo**
    
    ```
    Taxa de Incid√™ncia = (N√∫mero de casos / Popula√ß√£o) √ó 100.000
    ```
    
    **Interpreta√ß√£o:**
    - **X casos por 100.000 habitantes** = X pessoas em cada 100.000 desenvolveram a doen√ßa
    - **Padroniza√ß√£o**: Facilita compara√ß√µes entre regi√µes com diferentes tamanhos populacionais
    - **Fonte dos dados**: Popula√ß√£o do IBGE 2024 (dados oficiais)
    """)
    
    # Preparar dados de popula√ß√£o por faixa et√°ria
    populacao_clean = populacao_faixa_etaria.copy()
    
    # Mapear regi√µes para corresponder aos dados de casos
    mapeamento_regioes_pop = {
        '1_Regiao_Norte': 'Norte',
        '2_Regiao_Nordeste': 'Nordeste', 
        '3_Regiao_Sudeste': 'Sudeste',
        '4_Regiao_Sul': 'Sul',
        '5_Regiao_Centro_Oeste': 'Centro-Oeste'
    }
    
    populacao_clean['Regiao'] = populacao_clean['Regiao'].map(mapeamento_regioes_pop)
    
    # Calcular taxas de incid√™ncia por faixa et√°ria
    faixas_etarias_incidencia = ['Menor_1_Ano', '1_a_4_anos', '5_a_9_anos', '10_a_14_anos', 
                                '15_a_19_anos', '20_a_39_anos', '40_a_59_anos', '60_a_64_anos',
                                '65_a_69_anos', '70_a_79_anos', '80_e_mais']
    
    faixas_populacao = ['Menor_1_ano', '1_a_4_anos', '5_a_9_anos', '10_a_14_anos',
                       '15_a_19_anos', '20_a_39_anos', '40_a_59_anos', '60_anos_e_mais',
                       '60_anos_e_mais', '60_anos_e_mais', '60_anos_e_mais']
    
    # Calcular taxas de incid√™ncia
    taxas_incidencia = []
    
    for regiao in casos_por_regiao['Regiao']:
        casos_regiao = casos_por_regiao[casos_por_regiao['Regiao'] == regiao]
        pop_regiao = populacao_clean[populacao_clean['Regiao'] == regiao]
        
        if not pop_regiao.empty and not casos_regiao.empty:
            for i, faixa_casos in enumerate(faixas_etarias_incidencia):
                if i < len(faixas_populacao):
                    faixa_pop = faixas_populacao[i]
                    casos = casos_regiao[faixa_casos].iloc[0]
                    pop = pop_regiao[faixa_pop].iloc[0]
                    
                    if pop > 0:
                        taxa = (casos / pop) * 100000
                        taxas_incidencia.append({
                            'Regiao': regiao,
                            'Faixa_Etaria': faixa_casos,
                            'Casos': casos,
                            'Populacao': pop,
                            'Taxa_Incidencia': taxa
                        })
    
    df_taxas = pd.DataFrame(taxas_incidencia)
    
    # Gr√°fico de taxas de incid√™ncia por faixa et√°ria
    if not df_taxas.empty:
        fig_taxas = px.bar(
            df_taxas,
            x='Faixa_Etaria',
            y='Taxa_Incidencia',
            color='Regiao',
            title="Taxas de Incid√™ncia por Faixa Et√°ria e Regi√£o (por 100.000 habitantes)",
            labels={'Taxa_Incidencia': 'Taxa de Incid√™ncia (por 100.000)', 'Faixa_Etaria': 'Faixa Et√°ria'},
            barmode='group'
        )
        fig_taxas.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig_taxas, use_container_width=True)
        
        # Tabela de taxas de incid√™ncia
        st.subheader("üìã **Taxas de Incid√™ncia Detalhadas**")
        st.dataframe(df_taxas, use_container_width=True)
        
        st.markdown("""
        ### üîç **Interpreta√ß√£o das Taxas de Incid√™ncia**
        
        **O que os dados mostram:**
        - **Taxas por faixa et√°ria**: Risco espec√≠fico de cada grupo et√°rio
        - **Compara√ß√£o regional**: Varia√ß√µes no risco entre regi√µes
        - **Padr√µes epidemiol√≥gicos**: Identifica√ß√£o de grupos de maior risco
        
        **Como interpretar os valores:**
        - **Taxa alta**: Maior risco de desenvolver meningite naquela faixa et√°ria/regi√£o
        - **Taxa baixa**: Menor risco, mas ainda requer vigil√¢ncia
        - **Varia√ß√µes regionais**: Refletem diferen√ßas socioecon√¥micas e de acesso √† sa√∫de
        
        ### üìà **Principais Achados**
        
        - **Faixas de maior risco**: Identifica√ß√£o precisa dos grupos vulner√°veis
        - **Varia√ß√µes regionais**: Diferen√ßas no risco entre regi√µes brasileiras
        - **Padr√µes epidemiol√≥gicos**: Confirma√ß√£o de achados da literatura cient√≠fica
        - **Base para pol√≠ticas**: Dados para orientar estrat√©gias de preven√ß√£o
        """)
    
    # 5. CORRELA√á√ÉO ENTRE COBERTURA VACINAL E CASOS
    st.subheader("üîó **5. Correla√ß√£o entre Cobertura Vacinal e Incid√™ncia de Casos**")
    
    st.markdown("""
    ### üîó **Conceito de Correla√ß√£o Epidemiol√≥gica**
    
    A **an√°lise de correla√ß√£o** entre cobertura vacinal e incid√™ncia permite:
    
    - **Avaliar efetividade**: Impacto da vacina√ß√£o na redu√ß√£o de casos
    - **Identificar padr√µes**: Rela√ß√£o entre prote√ß√£o e ocorr√™ncia da doen√ßa
    - **Orientar pol√≠ticas**: Evid√™ncias para estrat√©gias de vacina√ß√£o
    - **Monitorar impacto**: Acompanhar resultados das campanhas
    
    ### üìä **Metodologia**
    
    - **Eixo X**: Cobertura vacinal pedi√°trica (doses aplicadas)
    - **Eixo Y**: Taxa de incid√™ncia (casos por 100.000 habitantes)
    - **Dados**: Popula√ß√£o do IBGE 2024 para c√°lculos precisos
    - **Interpreta√ß√£o**: Correla√ß√£o negativa indica efetividade da vacina√ß√£o
    """)
    
    # Calcular incid√™ncia por regi√£o usando popula√ß√£o total
    populacao_total_2024 = populacao_ibge[populacao_ibge['Regiao_UF'].str.contains('Regiao_')]
    populacao_total_2024['Regiao'] = populacao_total_2024['Regiao_UF'].str.replace('Regiao_', '')
    
    # Merge com dados de casos
    casos_com_pop = casos_por_regiao.merge(
        populacao_total_2024[['Regiao', '2024']], 
        on='Regiao', 
        how='left'
    )
    
    casos_com_pop['Incidencia_por_100k'] = (casos_com_pop['Total'] / casos_com_pop['2024']) * 100000
    
    # Merge dados de cobertura com dados de incid√™ncia para correla√ß√£o
    dados_correlacao = cobertura_clean.merge(
        casos_com_pop[['Regiao', 'Incidencia_por_100k']], 
        on='Regiao', 
        how='inner'
    )
    
    # Gr√°fico de correla√ß√£o
    fig_correlacao = px.scatter(
        dados_correlacao,
        x='Total_Pediatrico',
        y='Incidencia_por_100k',
        text='Regiao',
        title="Correla√ß√£o: Cobertura Vacinal vs Incid√™ncia de Casos (2024)",
        labels={'Total_Pediatrico': 'Cobertura Vacinal Pedi√°trica', 'Incidencia_por_100k': 'Incid√™ncia por 100.000 habitantes'}
    )
    
    fig_correlacao.update_traces(textposition="top center")
    st.plotly_chart(fig_correlacao, use_container_width=True)
    
    st.markdown("""
    ### üîç **Interpreta√ß√£o da Correla√ß√£o**
    
    **O que o gr√°fico mostra:**
    - **Rela√ß√£o** entre cobertura vacinal e incid√™ncia de casos
    - **Posi√ß√£o de cada regi√£o** no contexto nacional
    - **Padr√µes** de efetividade da vacina√ß√£o
    
    **Como interpretar:**
    - **Correla√ß√£o negativa**: Maior cobertura ‚Üí Menor incid√™ncia (desej√°vel)
    - **Correla√ß√£o positiva**: Maior cobertura ‚Üí Maior incid√™ncia (requer investiga√ß√£o)
    - **Sem correla√ß√£o**: Cobertura n√£o influencia incid√™ncia (poss√≠vel problema de qualidade)
    
    ### üìà **Principais Observa√ß√µes**
    
    - **Efetividade da vacina√ß√£o**: Evid√™ncias do impacto das campanhas
    - **Varia√ß√µes regionais**: Diferentes n√≠veis de efetividade por regi√£o
    - **Necessidades espec√≠ficas**: Regi√µes que precisam de estrat√©gias diferenciadas
    - **Monitoramento**: Base para acompanhar tend√™ncias futuras
    """)
    
    # 6. AN√ÅLISE DE ETIOLOGIA POR REGI√ÉO
    st.subheader("ü¶† **6. An√°lise de Etiologia por Regi√£o**")
    
    st.markdown("""
    ### ü¶† **Conceito de Etiologia**
    
    A **etiologia** refere-se √† **causa** ou **agente etiol√≥gico** da meningite:
    
    - **MCC**: Meningite por Criptococo (fungo)
    - **MM**: Meningite Meningoc√≥cica (bact√©ria Neisseria meningitidis)
    - **MTBC**: Meningite Tuberculosa (Mycobacterium tuberculosis)
    - **MB**: Meningite Bacteriana (outras bact√©rias)
    - **MV**: Meningite Viral (v√≠rus)
    - **MP**: Meningite Pneumoc√≥cica (Streptococcus pneumoniae)
    
    ### üìä **Import√¢ncia da An√°lise Etiol√≥gica**
    
    - **Estrat√©gias espec√≠ficas**: Cada etiologia requer abordagem diferente
    - **Preven√ß√£o direcionada**: Vacinas espec√≠ficas para cada agente
    - **Tratamento adequado**: Terapia baseada no agente causal
    - **Vigil√¢ncia epidemiol√≥gica**: Monitoramento de padr√µes etiol√≥gicos
    """)
    
    # Preparar dados de etiologia
    etiologia_clean = casos_etologia.copy()
    etiologia_clean['Regiao'] = etiologia_clean['UF_notificacao'].map(mapeamento_regioes)
    
    # Agrupar por regi√£o
    etiologia_por_regiao = etiologia_clean.groupby('Regiao').agg({
        'MCC': 'sum',  # Meningite por Criptococo
        'MM': 'sum',   # Meningite Meningoc√≥cica
        'MTBC': 'sum', # Meningite Tuberculosa
        'MB': 'sum',   # Meningite Bacteriana
        'MV': 'sum',   # Meningite Viral
        'MP': 'sum'    # Meningite Pneumoc√≥cica
    }).reset_index()
    
    # Gr√°fico de etiologia por regi√£o
    fig_etiologia = go.Figure()
    
    etiologias = ['MCC', 'MM', 'MTBC', 'MB', 'MV', 'MP']
    cores = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD']
    
    for i, etiologia in enumerate(etiologias):
        fig_etiologia.add_trace(go.Bar(
            name=etiologia,
            x=etiologia_por_regiao['Regiao'],
            y=etiologia_por_regiao[etiologia],
            marker_color=cores[i]
        ))
    
    fig_etiologia.update_layout(
        title="Distribui√ß√£o de Etiologias por Regi√£o",
        xaxis_title="Regi√£o",
        yaxis_title="N√∫mero de Casos",
        barmode='stack'
    )
    st.plotly_chart(fig_etiologia, use_container_width=True)
    
    st.markdown("""
    ### üîç **Interpreta√ß√£o da Distribui√ß√£o Etiol√≥gica**
    
    **O que o gr√°fico mostra:**
    - **Propor√ß√£o** de cada etiologia por regi√£o
    - **Padr√µes regionais** de distribui√ß√£o etiol√≥gica
    - **Identifica√ß√£o** de etiologias predominantes
    
    **Como interpretar:**
    - **Etiologia predominante**: Agente mais comum em cada regi√£o
    - **Varia√ß√µes regionais**: Diferen√ßas na distribui√ß√£o etiol√≥gica
    - **Estrat√©gias espec√≠ficas**: Necessidade de abordagens diferenciadas
    
    ### üìà **Principais Observa√ß√µes**
    
    - **Meningite Meningoc√≥cica (MM)**: Geralmente predominante
    - **Meningite Viral (MV)**: Comum em algumas regi√µes
    - **Meningite Bacteriana (MB)**: Varia√ß√µes regionais significativas
    - **Outras etiologias**: Padr√µes espec√≠ficos por regi√£o
    """)
    
    # 7. AN√ÅLISE DE SOROGRUPOS POR REGI√ÉO
    st.subheader("üß¨ **7. An√°lise de Sorogrupos por Regi√£o**")
    
    st.markdown("""
    ### üß¨ **Conceito de Sorogrupos**
    
    Os **sorogrupos** s√£o varia√ß√µes antig√™nicas da bact√©ria *Neisseria meningitidis*:
    
    - **A, B, C, D, X, Y, Z, W135**: Principais sorogrupos circulantes
    - **Sorogrupo C**: Alvo da vacina√ß√£o no Brasil (vacina meningoc√≥cica C)
    - **Sorogrupo B**: Emergente em algumas regi√µes
    - **Outros sorogrupos**: Varia√ß√µes regionais e temporais
    
    ### üìä **Import√¢ncia da An√°lise de Sorogrupos**
    
    - **Efetividade vacinal**: Monitorar impacto da vacina meningoc√≥cica C
    - **Emerg√™ncia de novos sorogrupos**: Detectar mudan√ßas epidemiol√≥gicas
    - **Estrat√©gias de vacina√ß√£o**: Orientar inclus√£o de novas vacinas
    - **Vigil√¢ncia epidemiol√≥gica**: Acompanhar padr√µes de circula√ß√£o
    """)
    
    # Preparar dados de sorogrupos
    sorogrupos_clean = casos_sorogrupo.copy()
    sorogrupos_clean['Regiao'] = sorogrupos_clean['UF_notificacao'].map(mapeamento_regioes)
    
    # Agrupar por regi√£o
    sorogrupos_por_regiao = sorogrupos_clean.groupby('Regiao').agg({
        'A': 'sum', 'B': 'sum', 'C': 'sum', 'D': 'sum',
        'X': 'sum', 'Y': 'sum', 'Z': 'sum', 'W135': 'sum'
    }).reset_index()
    
    # Gr√°fico de sorogrupos por regi√£o
    fig_sorogrupos = go.Figure()
    
    sorogrupos = ['A', 'B', 'C', 'D', 'X', 'Y', 'Z', 'W135']
    cores_sorogrupos = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', 
                       '#FF99CC', '#99CCFF', '#CCFF99', '#FFCCCC']
    
    for i, sorogrupo in enumerate(sorogrupos):
        fig_sorogrupos.add_trace(go.Bar(
            name=f'Sorogrupo {sorogrupo}',
            x=sorogrupos_por_regiao['Regiao'],
            y=sorogrupos_por_regiao[sorogrupo],
            marker_color=cores_sorogrupos[i]
        ))
    
    fig_sorogrupos.update_layout(
        title="Distribui√ß√£o de Sorogrupos por Regi√£o",
        xaxis_title="Regi√£o",
        yaxis_title="N√∫mero de Casos",
        barmode='stack'
    )
    st.plotly_chart(fig_sorogrupos, use_container_width=True)
    
    st.markdown("""
    ### üîç **Interpreta√ß√£o da Distribui√ß√£o de Sorogrupos**
    
    **O que o gr√°fico mostra:**
    - **Propor√ß√£o** de cada sorogrupo por regi√£o
    - **Padr√µes regionais** de circula√ß√£o de sorogrupos
    - **Efetividade** da vacina meningoc√≥cica C
    
    **Como interpretar:**
    - **Sorogrupo C baixo**: Indica efetividade da vacina√ß√£o
    - **Sorogrupo B alto**: Poss√≠vel emerg√™ncia de novo sorogrupo
    - **Varia√ß√µes regionais**: Diferentes padr√µes de circula√ß√£o
    - **Vigil√¢ncia**: Necessidade de monitoramento cont√≠nuo
    
    ### üìà **Principais Observa√ß√µes**
    
    - **Efetividade da vacina C**: Redu√ß√£o do sorogrupo C em regi√µes com boa cobertura
    - **Emerg√™ncia de sorogrupo B**: Poss√≠vel "serotype replacement"
    - **Varia√ß√µes regionais**: Padr√µes distintos de circula√ß√£o
    - **Necessidade de vigil√¢ncia**: Monitoramento de mudan√ßas epidemiol√≥gicas
    """)
    
    # 8. RESUMO ESTAT√çSTICO
    st.subheader("üìã **8. Resumo Estat√≠stico**")
    
    st.markdown("""
    ### üìä **S√≠ntese dos Dados Analisados**
    
    Este resumo apresenta os principais indicadores epidemiol√≥gicos da meningite no Brasil, 
    organizados por faixa et√°ria e regi√£o, com base em dados oficiais e an√°lises estat√≠sticas.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Distribui√ß√£o por Faixa Et√°ria:**")
        for _, row in faixa_etaria_clean.iterrows():
            percentual = (row['Casos'] / total_casos) * 100
            st.write(f"‚Ä¢ {row['Faixa_Etaria']}: {row['Casos']:,} casos ({percentual:.1f}%)")
    
    with col2:
        st.markdown("**Casos por Regi√£o:**")
        for _, row in casos_por_regiao.iterrows():
            percentual = (row['Total'] / casos_por_regiao['Total'].sum()) * 100
            st.write(f"‚Ä¢ {row['Regiao']}: {row['Total']:,} casos ({percentual:.1f}%)")
    
    st.markdown("""
    ### üéØ **Indicadores-Chave**
    
    - **Total de casos analisados**: Representa a carga total da doen√ßa
    - **Distribui√ß√£o et√°ria**: Identifica grupos de maior risco
    - **Distribui√ß√£o regional**: Revela desigualdades geogr√°ficas
    - **Taxas de incid√™ncia**: Permite compara√ß√µes padronizadas
    - **Cobertura vacinal**: Avalia efetividade das estrat√©gias de preven√ß√£o
    """)
    
    # 9. CONCLUS√ïES E RECOMENDA√á√ïES
    st.subheader("üí° **9. Conclus√µes e Recomenda√ß√µes**")
    
    st.markdown("""
    ### üî¨ **Principais Achados Cient√≠ficos**
    
    1. **Distribui√ß√£o Et√°ria**: 
       - Padr√£o bimodal confirmado (crian√ßas e adultos jovens)
       - Crian√ßas <10 anos representam 58,8% dos casos
       - Vulnerabilidade pedi√°trica superior √† literatura (35,2%)
    
    2. **Varia√ß√µes Regionais**: 
       - Desigualdades significativas entre regi√µes brasileiras
       - Sudeste: maior carga absoluta (densidade populacional)
       - Norte: menor incid√™ncia, mas padr√µes espec√≠ficos
    
    3. **Taxas de Incid√™ncia**: 
       - C√°lculos precisos com dados do IBGE 2024
       - Identifica√ß√£o de faixas et√°rias de maior risco
       - Compara√ß√µes regionais padronizadas
    
    4. **Cobertura Vacinal**: 
       - Varia√ß√µes regionais na efetividade
       - Correla√ß√£o com incid√™ncia de casos
       - Necessidade de estrat√©gias diferenciadas
    
    5. **Etiologias e Sorogrupos**: 
       - Padr√µes regionais espec√≠ficos
       - Efetividade da vacina meningoc√≥cica C
       - Emerg√™ncia de novos sorogrupos
    
    ### üéØ **Recomenda√ß√µes Estrat√©gicas**
    
    **Para Vigil√¢ncia Epidemiol√≥gica:**
    - Utilizar dados de popula√ß√£o atualizados (IBGE 2024)
    - Monitorar taxas de incid√™ncia por faixa et√°ria
    - Considerar densidade populacional no planejamento
    
    **Para Estrat√©gias de Vacina√ß√£o:**
    - Focar em faixas et√°rias com maior incid√™ncia per capita
    - Intensificar campanhas em regi√µes com menor cobertura
    - Considerar popula√ß√£o eleg√≠vel por regi√£o
    
    **Para Pesquisas Futuras:**
    - An√°lise de tend√™ncias temporais de incid√™ncia
    - Estudos de efetividade vacinal por faixa et√°ria
    - Correla√ß√£o entre cobertura vacinal e incid√™ncia ajustada
    - Monitoramento de sorogrupos emergentes
    
    **Para Pol√≠ticas P√∫blicas:**
    - Desenvolver estrat√©gias espec√≠ficas por etiologia e regi√£o
    - Ajustar campanhas por densidade populacional
    - Fortalecer vigil√¢ncia em grupos de maior risco
    """)
    
    # 10. DADOS TABULARES
    st.subheader("üìä **10. Dados Tabulares Detalhados**")
    
    st.markdown("""
    ### üìã **Acesso aos Dados Completos**
    
    Esta se√ß√£o disponibiliza todos os dados utilizados nas an√°lises, organizados em tabelas interativas:
    
    - **Faixa Et√°ria**: Distribui√ß√£o de casos por grupo et√°rio
    - **Regi√µes**: Casos consolidados por regi√£o brasileira
    - **Cobertura Vacinal**: Dados de vacina√ß√£o por regi√£o
    - **Popula√ß√£o IBGE**: Dados oficiais de popula√ß√£o (2000-2025)
    - **Taxas de Incid√™ncia**: C√°lculos padronizados por 100.000 habitantes
    """)
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["Faixa Et√°ria", "Regi√µes", "Cobertura Vacinal", "Popula√ß√£o IBGE", "Taxas de Incid√™ncia"])
    
    with tab1:
        st.dataframe(faixa_etaria_clean, use_container_width=True)
    
    with tab2:
        st.dataframe(casos_por_regiao, use_container_width=True)
    
    with tab3:
        st.dataframe(cobertura_clean[['Regiao', 'Total_Pediatrico', 'Total_Geral']], use_container_width=True)
    
    with tab4:
        st.dataframe(populacao_ibge, use_container_width=True)
    
    with tab5:
        if not df_taxas.empty:
            st.dataframe(df_taxas, use_container_width=True)
        else:
            st.info("Dados de taxas de incid√™ncia n√£o dispon√≠veis")
